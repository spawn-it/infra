digraph {
    compound = "true"
    newrank = "true"
    subgraph "root" {
        // ═══════════════════════════════════════════════════════════════
        // DÉCLARATION DES NOEUDS - Ressources principales
        // ═══════════════════════════════════════════════════════════════
        
        // Ressources Docker du module
        "[root] module.docker_instances.data.docker_network.custom_network (expand)" [label = "module.docker_instances.data.docker_network.custom_network", shape = "box"]
        "[root] module.docker_instances.docker_container.instance (expand)" [label = "module.docker_instances.docker_container.instance", shape = "box"]
        "[root] module.docker_instances.docker_image.instance (expand)" [label = "module.docker_instances.docker_image.instance", shape = "box"]
        
        // Provider Docker - Point central de toutes les opérations Docker
        "[root] provider[\"registry.opentofu.org/kreuzwerker/docker\"]" [label = "provider[\"registry.opentofu.org/kreuzwerker/docker\"]", shape = "diamond"]
        
        // Variables d'entrée du plan racine
        "[root] var.host_aws_access_key_id" [label = "var.host_aws_access_key_id", shape = "note"]
        "[root] var.host_aws_default_region" [label = "var.host_aws_default_region", shape = "note"]
        "[root] var.host_aws_secret_access_key" [label = "var.host_aws_secret_access_key", shape = "note"]
        "[root] var.instances" [label = "var.instances", shape = "note"]
        
        // ═══════════════════════════════════════════════════════════════
        // DÉPENDANCES PRINCIPALES - Flux de données critiques
        // ═══════════════════════════════════════════════════════════════
        
        // Le traitement des instances dépend des variables AWS et de la liste des instances
        "[root] local.processed_instances (expand)" -> "[root] var.host_aws_access_key_id (expand, reference)"
        "[root] local.processed_instances (expand)" -> "[root] var.host_aws_default_region (expand, reference)"
        "[root] local.processed_instances (expand)" -> "[root] var.host_aws_secret_access_key (expand, reference)"
        "[root] local.processed_instances (expand)" -> "[root] var.instances (expand, reference)"
        
        // ═══════════════════════════════════════════════════════════════
        // CYCLE DE VIE DU MODULE - Ordre d'exécution
        // ═══════════════════════════════════════════════════════════════
        
        // Fermeture du module après création des containers
        "[root] module.docker_instances (close)" -> "[root] module.docker_instances.docker_container.instance (expand)"
        // Initialisation du module avec les instances traitées
        "[root] module.docker_instances (expand)" -> "[root] local.processed_instances (expand)"
        
        // ═══════════════════════════════════════════════════════════════
        // DÉPENDANCES RÉSEAU - Prérequis pour les containers
        // ═══════════════════════════════════════════════════════════════
        
        // Le réseau doit être récupéré avant tout déploiement de container
        "[root] module.docker_instances.data.docker_network.custom_network (expand)" -> "[root] module.docker_instances.var.network_name (expand, reference)"
        "[root] module.docker_instances.data.docker_network.custom_network (expand)" -> "[root] provider[\"registry.opentofu.org/kreuzwerker/docker\"]"
        
        // ═══════════════════════════════════════════════════════════════
        // DÉPENDANCES CONTAINER - Chaîne de création complète
        // ═══════════════════════════════════════════════════════════════
        
        // Le container dépend du réseau (connectivité) et de l'image (base)
        "[root] module.docker_instances.docker_container.instance (expand)" -> "[root] module.docker_instances.data.docker_network.custom_network (expand)"
        "[root] module.docker_instances.docker_container.instance (expand)" -> "[root] module.docker_instances.docker_image.instance (expand)"
        
        // Configuration du container via variables spécialisées
        "[root] module.docker_instances.docker_container.instance (expand)" -> "[root] module.docker_instances.var.acces_to_docker (expand, reference)"
        "[root] module.docker_instances.docker_container.instance (expand)" -> "[root] module.docker_instances.var.command (expand, reference)"
        "[root] module.docker_instances.docker_container.instance (expand)" -> "[root] module.docker_instances.var.container_name (expand, reference)"
        "[root] module.docker_instances.docker_container.instance (expand)" -> "[root] module.docker_instances.var.env_vars (expand, reference)"
        "[root] module.docker_instances.docker_container.instance (expand)" -> "[root] module.docker_instances.var.has_volume (expand, reference)"
        "[root] module.docker_instances.docker_container.instance (expand)" -> "[root] module.docker_instances.var.ports (expand, reference)"
        "[root] module.docker_instances.docker_container.instance (expand)" -> "[root] module.docker_instances.var.volume_name (expand, reference)"
        
        // ═══════════════════════════════════════════════════════════════
        // DÉPENDANCES IMAGE - Base des containers
        // ═══════════════════════════════════════════════════════════════
        
        // L'image Docker doit être résolue via le provider
        "[root] module.docker_instances.docker_image.instance (expand)" -> "[root] module.docker_instances.var.image (expand, reference)"
        "[root] module.docker_instances.docker_image.instance (expand)" -> "[root] provider[\"registry.opentofu.org/kreuzwerker/docker\"]"
        
        // ═══════════════════════════════════════════════════════════════
        // VARIABLES DU MODULE - Propagation des inputs
        // ═══════════════════════════════════════════════════════════════
        
        // Chaîne input → reference pour chaque variable du module
        "[root] module.docker_instances.var.acces_to_docker (expand, input)" -> "[root] module.docker_instances (expand)"
        "[root] module.docker_instances.var.acces_to_docker (expand, reference)" -> "[root] module.docker_instances.var.acces_to_docker (expand, input)"
        
        "[root] module.docker_instances.var.command (expand, input)" -> "[root] module.docker_instances (expand)"
        "[root] module.docker_instances.var.command (expand, reference)" -> "[root] module.docker_instances.var.command (expand, input)"
        
        "[root] module.docker_instances.var.container_name (expand, input)" -> "[root] module.docker_instances (expand)"
        "[root] module.docker_instances.var.container_name (expand, reference)" -> "[root] module.docker_instances.var.container_name (expand, input)"
        
        "[root] module.docker_instances.var.env_vars (expand, input)" -> "[root] module.docker_instances (expand)"
        "[root] module.docker_instances.var.env_vars (expand, reference)" -> "[root] module.docker_instances.var.env_vars (expand, input)"
        
        "[root] module.docker_instances.var.has_volume (expand, input)" -> "[root] module.docker_instances (expand)"
        "[root] module.docker_instances.var.has_volume (expand, reference)" -> "[root] module.docker_instances.var.has_volume (expand, input)"
        
        "[root] module.docker_instances.var.image (expand, input)" -> "[root] module.docker_instances (expand)"
        "[root] module.docker_instances.var.image (expand, reference)" -> "[root] module.docker_instances.var.image (expand, input)"
        
        "[root] module.docker_instances.var.network_name (expand, input)" -> "[root] module.docker_instances (expand)"
        "[root] module.docker_instances.var.network_name (expand, reference)" -> "[root] module.docker_instances.var.network_name (expand, input)"
        
        "[root] module.docker_instances.var.ports (expand, input)" -> "[root] module.docker_instances (expand)"
        "[root] module.docker_instances.var.ports (expand, reference)" -> "[root] module.docker_instances.var.ports (expand, input)"
        
        "[root] module.docker_instances.var.volume_name (expand, input)" -> "[root] module.docker_instances (expand)"
        "[root] module.docker_instances.var.volume_name (expand, reference)" -> "[root] module.docker_instances.var.volume_name (expand, input)"
        
        // ═══════════════════════════════════════════════════════════════
        // FINALISATION - Fermeture des ressources
        // ═══════════════════════════════════════════════════════════════
        
        // Le provider se ferme après la création de tous les containers
        "[root] provider[\"registry.opentofu.org/kreuzwerker/docker\"] (close)" -> "[root] module.docker_instances.docker_container.instance (expand)"
        
        // Points de finalisation du plan racine
        "[root] root" -> "[root] module.docker_instances (close)"
        "[root] root" -> "[root] provider[\"registry.opentofu.org/kreuzwerker/docker\"] (close)"
        
        // ═══════════════════════════════════════════════════════════════
        // RÉFÉRENCES AUX VARIABLES RACINE
        // ═══════════════════════════════════════════════════════════════
        
        "[root] var.host_aws_access_key_id (expand, reference)" -> "[root] var.host_aws_access_key_id"
        "[root] var.host_aws_default_region (expand, reference)" -> "[root] var.host_aws_default_region"
        "[root] var.host_aws_secret_access_key (expand, reference)" -> "[root] var.host_aws_secret_access_key"
        "[root] var.instances (expand, reference)" -> "[root] var.instances"
    }
}
